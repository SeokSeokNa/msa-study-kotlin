server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka


spring:
  application:
    name: apigateway-service
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: admin
    password: admin
#  profiles:
#    active: prod #config-server에 있는 설정 파일을 profile별로 불러올 수 있다( 현재 설정으로는 ecommerce-prod.yml 파일을 불러오게된다.)
  config:
    import: optional:configserver:http://localhost:8888
  cloud:
    config:
      name: config-server # configServer의 어플리케이션 name을 명시하게되면 application.yml 파일을 읽어오게함
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:
#        - id: user-service
#          uri: lb://USER-SERVICE/ #discovery service에 등록된 값을 가져다가 사용하면됨
#          predicates:
#              - Path=/user-service/** # user-service 라고 호출한것만 전달해주나 해당하는 서비스의 엔드포인트 주소가 /user-service/** 형태여야한다! 안그러면 404 error 발생
        - id: user-service
          uri: lb://USER-SERVICE/ #discovery service에 등록된 값을 가져다가 사용하면됨
          predicates:
            - Path=/user-service/login
            - Method=POST # post 요청시에만 동작
          filters:
            - RemoveRequestHeader=Cookie # post 전송은 매번 새로운 값으로 나타내기 위해 request header를 초기화
            - RewritePath=/user-service/(?<segment>.*), /$\{segment} # 사용자가 /user-service/** 형태로 요청시 /** 형태로 변환하여 USER-SERVICE lb에 전송하게됨
        - id: user-service
          uri: lb://USER-SERVICE/
          predicates:
            - Path=/user-service/users
            - Method=POST # post 요청시에만 동작
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE/
          predicates:
            - Path=/user-service/**
            - Method=GET # GET 요청시에만 동작
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter # jwt 인증 필터 추가
        - id: user-service
          uri: lb://USER-SERVICE/
          predicates:
            - Path=/user-service/actuator/** # actuator 관련 엔드포인트 포워딩하기
            - Method=GET , POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}




        - id: catalog-service
          uri: lb://CATALOG-SERVICE/
          predicates:
            - Path=/catalog-service/**
        - id: order-service
          uri: lb://ORDER-SERVICE/
          predicates:
            - Path=/order-service/**
        - id: first-service
          uri: lb://MY-FIRST-SERVICE/
          predicates: #url pattern 적용
            - Path=/first-service/** # path 가 first-service 인 경우 해당 service로 전송
          filters: #필터 추가
#            - AddRequestHeader=first-request, first-request-header2 # 요청ㅎ[더=헤더명 , 헤더값
#            - AddResponseHeader=first-response, first-response-header2
            - CustomFilter
        - id: first-service
          uri: lb://MY-SECOND-SERVICE/
          predicates:
            - Path=/second-service/**
          filters:
#            - AddRequestHeader=second-request, second-request-header2
#            - AddResponseHeader=second-response, second-response-header2
            - name: CustomFilter
            - name: LoggingFilter
              args:
                baseMessage: Hi, there
                preLogger: true
                postLogger: true

# actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: refresh , health , beans, busrefresh ,httpexchanges , info , metrics , prometheus #httptrace 를 사용하려면 HttpExchangeRepository 객체를 bean 으로 등록하여 사용해야 한다.