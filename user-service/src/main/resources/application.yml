server:
  port: 0

spring:
  application:
    name: user-service

  rabbitmq:
#    host: 127.0.0.1
    host: rabbitmq-stream # docker container 사용시
    port: 5672
    username: admin
    password: admin
  # 스프링 버전이 올라가면서 bootstrap.yml 파일을 더이상 사용하지 않고 이런식으로 config-server 와 통신함
  cloud:
    config:
      #      name: ecommerce # config 파일명
      #      name: config-server # configServer의 어플리케이션 name을 명시하게되면 application.yml 파일을 읽어오게함
      name: user-service
  config:
#    import: optional:configserver:http://localhost:8888
    import: optional:configserver:http://config-service:8888 # docker container 사용시
  #  profiles:
  #    active: dev #config-server에 있는 설정 파일을 profile별로 불러올 수 있다( 현재 설정으로는 ecommerce-dev.yml 파일을 불러오게된다.)


  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
#    url: jdbc:mariadb://localhost:3306/mydb
    url: jdbc:mariadb://mariadb:3306/mydb # docker container 사용시
    username: root
    password: test1357
  jpa:
    hibernate:
      ddl-auto: create

eureka:
  instance:
    #    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
#      defaultZone: http://localhost:8761/eureka
      defaultZone: http://discovery-service:8761/eureka # docker container 사용시

greeting:
  message: Welcome to the Simple User-Service!

logging:
  level:
    io.seok.userservice.client: DEBUG
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
  file: /api-logs/users-ws.log

# actuator 설정
management:
  zipkin:
    tracing:
#      endpoint: http://127.0.0.1:9411/api/v2/spans
      endpoint: http://zipkin:9411/api/v2/spans # docker container 사용시
  tracing:
    enabled: true
    sampling:
      probability: 1.0 # zipkin 서버로 어느정보 비율로 추적 데이터를 전송할건지(1.0 이면 모두 전송한다는 뜻)
  endpoints:
    web:
      exposure:
        include: refresh , health , beans , busrefresh , info , metrics , prometheus

#token:
#  expiration_time: 86400000  # 60*1000(1분) * 60(60분) * 24(1일)(토큰 만료 시간은 1일)
#  secret: 1d93a5f2017760fc731177675fbce0e57c057b522809f75150a27e0ac17106867efaade066ec8ea8bccb52ebd85c7a9e9ea5f93c7c24845f7639b08a323693b4